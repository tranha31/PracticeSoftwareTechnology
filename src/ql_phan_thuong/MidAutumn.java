package ql_phan_thuong;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author PV
 */
public class MidAutumn extends javax.swing.JFrame {

    /**
     * Creates new form MidAutumn
     */
    final String url = "jdbc:mysql://localhost/homework1_db";
    final String user = "root";
    final String password = "";
    
    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    
    public MidAutumn() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TruongHoc = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Tuoi = new javax.swing.JTextField();
        ConOng = new javax.swing.JTextField();
        DiaChi = new javax.swing.JTextField();
        PhanQua = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        GioiTinh = new javax.swing.JComboBox<>();
        GiaTri = new javax.swing.JTextField();
        Them = new javax.swing.JButton();
        SoLuong = new javax.swing.JSpinner();
        ConBa = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        HoTen1 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();

        TruongHoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TruongHocActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 0));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ql_phan_thuong/ma.png"))); // NOI18N
        jLabel1.setText("Tết Trung Thu");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Họ Tên: ");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Tuổi:");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Con Ông Bà:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Phần Quà:");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Số Lượng:");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setText("Giá Trị:");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel8.setText("Địa Chỉ:");

        Tuoi.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        Tuoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TuoiActionPerformed(evt);
            }
        });

        ConOng.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        DiaChi.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        DiaChi.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        PhanQua.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel9.setText("Giới Tính:");

        GioiTinh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ", "Khác" }));
        GioiTinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GioiTinhActionPerformed(evt);
            }
        });

        GiaTri.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        GiaTri.setText("(Đồng)");

        Them.setBackground(new java.awt.Color(51, 204, 0));
        Them.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        Them.setForeground(new java.awt.Color(255, 255, 255));
        Them.setText("Thêm");
        Them.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThemActionPerformed(evt);
            }
        });

        ConBa.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jButton1.setBackground(new java.awt.Color(51, 204, 0));
        jButton1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Danh Sách Đã Trao Thưởng");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ql_phan_thuong/line.png"))); // NOI18N

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ql_phan_thuong/line.png"))); // NOI18N

        jLabel12.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(102, 102, 102));
        jLabel12.setText("Sản Phẩm được tạo bởi nhóm A+ CNPM CopyRight 2020");

        jLabel13.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel13.setText("Trường");

        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel14.setText("Năm:");

        HoTen1.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        HoTen1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HoTen1ActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel15.setText("Bố");

        jLabel16.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel16.setText("Mẹ");

        jTextField1.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jTextField2.setToolTipText("");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel6)))
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(58, 58, 58))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel16))
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(GiaTri, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(Them)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1))
                            .addComponent(ConOng)
                            .addComponent(DiaChi)
                            .addComponent(PhanQua)
                            .addComponent(ConBa)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(HoTen1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Tuoi, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(133, 133, 133)
                                        .addComponent(jLabel9)
                                        .addGap(38, 38, 38)
                                        .addComponent(GioiTinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jTextField1)))
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(HoTen1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GioiTinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(Tuoi, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(jLabel4))
                        .addGap(25, 25, 25)
                        .addComponent(jLabel16))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(ConOng, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ConBa, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jTextField2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PhanQua, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(SoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(GiaTri, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Them)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addGap(3, 3, 3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TuoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TuoiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TuoiActionPerformed

    private void GioiTinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GioiTinhActionPerformed
        gioitinh = GioiTinh.getSelectedItem().toString();
    }//GEN-LAST:event_GioiTinhActionPerformed

    private boolean checkExistEntity(String entity, String column, String table){
        
        try{
            con = DriverManager.getConnection(url, user, password);
            String sql = "SELECT * FROM " + table;
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()){
                if((rs.getString(column)).equals(entity)){
                    return true;
                }
            }
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, e);
            
        }
        return false;
        
    }
    
    private void ThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThemActionPerformed
        if(jTextField1.getText().equals("")||HoTen1.getText().equals("")||Tuoi.getText().equals("")||
           ConOng.getText().equals("")||ConBa.getText().equals("")||
           DiaChi.getText().equals("")||PhanQua.getText().equals("")||
           GiaTri.getText().equals("")||jTextField2.getText().equals("")){
            JOptionPane.showMessageDialog(rootPane,"Vui Lòng Nhập Đầy Đủ Thông Tin !");
        }
        else{
            /*
            String path = "src/ql_phan_thuong/excel/MidAutumn.xlsx";
            try {
                FileInputStream FIS = new FileInputStream(path);
                Workbook workbook = WorkbookFactory.create(FIS);
                Sheet sheet = workbook.getSheetAt(0);
                
                Object[] bookData = {
                    HoTen.getText(),Tuoi.getText(),GioiTinh.getSelectedItem().toString(),ConOng.getText(),
                    ConBa.getText(),DiaChi.getText(),PhanQua.getText(),SoLuong.getValue(),GiaTri.getText()
                };
                int rowCount;
                if(sheet.getLastRowNum()==-1) rowCount=0;
                else rowCount=sheet.getLastRowNum()+1;
                Row row = sheet.createRow(rowCount);
                int columnCount =0;
                Cell cell = row.createCell(columnCount);
                cell.setCellValue(rowCount);
                for(Object field : bookData){
                    cell = row.createCell(++columnCount);
                    if (field instanceof String) {
                        cell.setCellValue((String) field);
                    } else if (field instanceof Integer) {
                        cell.setCellValue((Integer) field);
                    }
                }
                FIS.close();
                FileOutputStream outputStream = new FileOutputStream(path);
                workbook.write(outputStream);
                workbook.close();
                outputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(MidAutumn.class.getName()).log(Level.SEVERE, null, ex);
            }
            */
            try{
                con = DriverManager.getConnection(url, user, password);
                String insert = "";
                String update = "";
                
                if(!(checkExistEntity(jTextField1.getText().trim(), "Year", "Event"))){
                    insert = "INSERT INTO Event(`Name`, `Year`) VALUES (?, ?)";
                    pst = con.prepareStatement(insert);
                    pst.setString(1, "Trung thu");
                    pst.setString(2, jTextField1.getText().trim());
                    pst.executeUpdate();
                    
                    insert = "INSERT INTO GIFT(`Gift_Name`, `Cost`) VALUES (?, ?)";
                    pst = con.prepareStatement(insert);
                    pst.setString(1, PhanQua.getText().trim());
                    pst.setString(2, GiaTri.getText().trim());
                    pst.executeUpdate();
                    
                    String select = "SELECT * FROM Event WHERE Event.Year = ?";
                    pst = con.prepareStatement(select);
                    pst.setString(1, jTextField1.getText().trim());
                    ResultSet rs = pst.executeQuery();
                    
                    insert = "INSERT INTO Family(`Father`, `Mother`, `Address`, `ID_E`)"
                            + "VALUES (?, ?, ?, ?)";
                    pst = con.prepareStatement(insert);
                    pst.setString(1, ConOng.getText().trim());
                    pst.setString(2, ConBa.getText().trim());
                    pst.setString(3, DiaChi.getText().trim());
                    while(rs.next()){
                        int idEv = rs.getInt("ID");
                        pst.setString(4, Integer.toString(idEv));
                    }
                    pst.executeUpdate();
                    
                    insert = "INSERT INTO Achievement(`Achievement_Name`) VALUES (?)";
                    pst = con.prepareStatement(insert);
                    pst.setString(1, "Dịp đặc biệt");
                    pst.executeUpdate();
                    
                    insert = "INSERT INTO Recipient(`Name`, `Age`, `Sex`, `School`, `ID_Family`) "
                            + "VALUES (?, ?, ?, ?, ?)";
                    String sex = GioiTinh.getSelectedItem().toString().trim();
                    pst = con.prepareStatement(insert);
                    pst.setString(1, HoTen1.getText().trim());
                    pst.setString(2, Tuoi.getText().trim());
                    pst.setString(3, sex);
                    pst.setString(4, jTextField2.getText().trim());
                    // select id_family to insert
                    String sel = "SELECT * FROM Family "
                            + "WHERE Father like ? AND Mother like ?";
                    PreparedStatement pst2 = con.prepareStatement(sel);
                    pst2.setString(1, ConOng.getText().trim());
                    pst2.setString(2, ConBa.getText().trim());
                    ResultSet idRes = pst2.executeQuery();
                    while(idRes.next()){
                        int idFamily = idRes.getInt("ID");
                        pst.setString(5, Integer.toString(idFamily));
                    }
                    pst.executeUpdate();
                    
                    // add row to Receive_Gift table
                    // get id of recipient
                    String selectID = "SELECT * FROM Recipient, Family "
                            + "WHERE Recipient.ID_Family = Family.ID";
                    pst = con.prepareStatement(selectID);
                    rs = pst.executeQuery();
                    int idRecipient = -1;
                    while (rs.next()){
                        if (rs.getString("Name").equals(HoTen1.getText().trim()) 
                                && (rs.getString("Father").equals(ConOng.getText().trim())) 
                                && (rs.getString("Mother").equals(ConBa.getText().trim())) 
                                && (rs.getString("Address").equals(DiaChi.getText().trim()))){
                            idRecipient = rs.getInt("ID");
                        }
                    }
                    int idEvent = -1;
                    int idGift = -1;
                    int idAchievement = -1;
                    // get id of Gift
                    selectID = "SELECT * FROM Gift "
                            + "WHERE Gift.Gift_Name = ?";
                    pst = con.prepareStatement(selectID);
                    pst.setString(1, PhanQua.getText().trim());
                    rs = pst.executeQuery();
                    while(rs.next()){
                        idGift = rs.getInt("ID");
                    }
                    // get id of Event 
                    selectID = "SELECT * FROM Event "
                            + "WHERE Event.Name = ?";
                    pst = con.prepareStatement(selectID);
                    pst.setString(1, "Trung thu");
                    rs = pst.executeQuery();
                    while(rs.next()){
                        idEvent = rs.getInt("ID");
                    }
                    // get id of Achievement
                    selectID = "SELECT * FROM Achievement "
                            + "WHERE Achievement.Achievement_Name = ?";
                    pst = con.prepareStatement(selectID);
                    pst.setString(1, "Dịp đặc biệt");
                    rs = pst.executeQuery();
                    while(rs.next()){
                        idAchievement = rs.getInt("ID");
                    }

                    insert = "INSERT INTO Receive_Gift"
                            + "(`ID_Recipient`, `ID_Gift`, `ID_Event`, `ID_Achievement`, `Quantity`) "
                            + "VALUES (?, ?, ?, ?, ?)";
                    pst = con.prepareStatement(insert);
                    pst.setString(1, Integer.toString(idRecipient));
                    pst.setString(2, Integer.toString(idGift));
                    pst.setString(3, Integer.toString(idEvent));
                    pst.setString(4, Integer.toString(idAchievement));
                    pst.setString(5, Integer.toString((Integer) SoLuong.getValue()));
                    pst.executeUpdate();
                    
                    JOptionPane.showMessageDialog(rootPane, "Đã Lưu !");
                }
                else{
                    String sex = GioiTinh.getSelectedItem().toString().trim();
                    if(checkExistEntity(ConOng.getText().trim(), "Father", "Family")){
                        if(checkExistEntity(ConBa.getText().trim(), "Mother", "Family")){
                            if(checkExistEntity(HoTen1.getText().trim(), "Name", "Recipient")){
                                String selectID = "SELECT * FROM Family, Recipient, Event "
                                        +"WHERE Family.Father = ? AND Family.Mother = ? "
                                        +"AND Family.ID = Recipient.ID_Family AND Recipient.Name = ? "
                                        +"AND Family.ID_E = Event.ID AND Event.Year = ? AND Event.Name = ? ";
                                pst = con.prepareStatement(selectID);
                                pst.setString(1, ConOng.getText().trim());
                                pst.setString(2, ConBa.getText().trim());
                                pst.setString(3, HoTen1.getText().trim());
                                pst.setString(4, jTextField1.getText().trim());
                                pst.setString(5, "Trung thu");
                                ResultSet rs = pst.executeQuery();
                                int idEv = 0, idF = 0;
                                while(rs.next()){
                                    int idEv1 = rs.getInt("ID_E");
                                    int idRep1 = rs.getInt("ID");
                                    idEv = idEv1;
                                    idF = idRep1;
                                }
                                selectID = "SELECT * FROM Recipient WHERE Recipient.ID_Family = ? AND Recipient.Name = ?";
                                pst = con.prepareStatement(selectID);
                                pst.setString(1, Integer.toString(idF));
                                pst.setString(2, HoTen1.getText().trim());
                                rs = pst.executeQuery();
                                int idRep = 0;
                                while(rs.next()){
                                    int idRep1 = rs.getInt("ID");
                                    idRep = idRep1;
                                }
                                
                                selectID = "SELECT * FROM Receive_Gift WHERE Receive_Gift.ID_Recipient = ? AND Receive_Gift.ID_Event = ?";
                                pst = con.prepareStatement(selectID);
                                pst.setString(1, Integer.toString(idRep));
                                pst.setString(2, Integer.toString(idEv));
                                rs = pst.executeQuery();
                                int idG = 0;
                                while(rs.next()){
                                    idG = rs.getInt("ID_Gift");
                                }
                                
                                update = "UPDATE Receive_Gift SET Quantity = ? WHERE ID_Recipient = ? AND ID_Event = ?";
                                pst = con.prepareStatement(update);
                                int sl = (int) SoLuong.getValue();
                                pst.setString(1, Integer.toString(sl));
                                pst.setString(2, Integer.toString(idRep));
                                pst.setString(3, Integer.toString(idEv));
                                pst.executeUpdate();
                                
                                update = "UPDATE Gift SET Gift_Name = ?, Cost = ? WHERE ID = ?";
                                pst = con.prepareStatement(update);
                                pst.setString(1, PhanQua.getText().trim());
                                pst.setString(2, GiaTri.getText().trim());
                                pst.setString(3, Integer.toString(idG));
                                pst.executeUpdate();
                                
                                update = "UPDATE Family SET Address = ? WHERE ID = ? AND ID_E = ?";
                                pst = con.prepareStatement(update);
                                pst.setString(1, DiaChi.getText().trim());
                                pst.setString(2, Integer.toString(idF));
                                pst.setString(3, Integer.toString(idEv));
                                pst.executeUpdate();
                                
                                update = "UPDATE Recipient SET Age = ?, Sex = ?, School = ? WHERE ID = ? AND ID_Family = ?";
                                pst = con.prepareStatement(update);
                                pst.setString(1, Tuoi.getText().trim());
                                pst.setString(2, sex);
                                pst.setString(3, jTextField2.getText().trim());
                                pst.setString(4, Integer.toString(idRep));
                                pst.setString(5, Integer.toString(idF));
                                pst.executeUpdate();
                                
                                JOptionPane.showMessageDialog(rootPane, "Đã Lưu !");
                                //System.out.println(idRep);
                                //int idEv = rs.getInt("ID_E");
                                
                            }
                            else{
                                String selectID = "SELECT * FROM Family, Event "
                                        +"WHERE Family.Father = ? AND Family.Mother = ? "
                                        +"AND Family.ID_E = Event.ID AND Event.Year = ? AND Event.Name = ? ";
                                pst = con.prepareStatement(selectID);
                                pst.setString(1, ConOng.getText().trim());
                                pst.setString(2, ConBa.getText().trim());
                                pst.setString(3, jTextField1.getText().trim());
                                pst.setString(4, "Trung thu");
                                ResultSet rs = pst.executeQuery();
                                int idF = 0, idEv = 0;
                                while(rs.next()){
                                    idF = rs.getInt("ID");
                                    idEv = rs.getInt("ID_E");
                                }
                                
                                insert = "INSERT INTO GIFT(`Gift_Name`, `Cost`) VALUES (?, ?)";
                                pst = con.prepareStatement(insert);
                                pst.setString(1, PhanQua.getText().trim());
                                pst.setString(2, GiaTri.getText().trim());
                                pst.executeUpdate();
                                
                                insert = "INSERT INTO Achievement(`Achievement_Name`) VALUES (?)";
                                pst = con.prepareStatement(insert);
                                pst.setString(1, "Dịp đặc biệt");
                                pst.executeUpdate();
                                
                                insert = "INSERT INTO Recipient(`Name`, `Age`, `Sex`, `School`, `ID_Family`) "
                                        + "VALUES (?, ?, ?, ?, ?)";
                                pst = con.prepareStatement(insert);
                                pst.setString(1, HoTen1.getText().trim());
                                pst.setString(2, Tuoi.getText().trim());
                                pst.setString(3, sex);
                                pst.setString(4, jTextField2.getText().trim());
                                pst.setString(5, Integer.toString(idF));
                                pst.executeUpdate();
                                
                                // add row to Receive_Gift table
                                // get id of recipient
                                selectID = "SELECT * FROM Recipient "
                                            + "WHERE Recipient.ID_Family = ?";
                                pst = con.prepareStatement(selectID);
                                pst.setString(1, Integer.toString(idF));
                                rs = pst.executeQuery();
                                int idRecipient = -1;
                                while (rs.next()){
                                    idRecipient = rs.getInt("ID");
                                }
                                int idEvent = idEv;
                                int idGift = -1;
                                int idAchievement = -1;
                                // get id of Gift
                                selectID = "SELECT * FROM Gift "
                                            + "WHERE Gift.Gift_Name = ?";
                                pst = con.prepareStatement(selectID);
                                pst.setString(1, PhanQua.getText().trim());
                                rs = pst.executeQuery();
                                while(rs.next()){
                                    idGift = rs.getInt("ID");
                                }
                                
                                // get id of Achievement
                                selectID = "SELECT * FROM Achievement "
                                    + "WHERE Achievement.Achievement_Name = ?";
                                pst = con.prepareStatement(selectID);
                                pst.setString(1, "Dịp đặc biệt");
                                rs = pst.executeQuery();
                                while(rs.next()){
                                    idAchievement = rs.getInt("ID");
                                }

                                insert = "INSERT INTO Receive_Gift"
                                    + "(`ID_Recipient`, `ID_Gift`, `ID_Event`, `ID_Achievement`, `Quantity`) "
                                    + "VALUES (?, ?, ?, ?, ?)";
                                pst = con.prepareStatement(insert);
                                pst.setString(1, Integer.toString(idRecipient));
                                pst.setString(2, Integer.toString(idGift));
                                pst.setString(3, Integer.toString(idEvent));
                                pst.setString(4, Integer.toString(idAchievement));
                                pst.setString(5, Integer.toString((Integer) SoLuong.getValue()));
                                pst.executeUpdate();
                    
                                JOptionPane.showMessageDialog(rootPane, "Đã Lưu !");

                            }
                        }  
                    }
                    else if(checkExistEntity(ConOng.getText().trim(), "Father", "Family") == false
                            ||checkExistEntity(ConOng.getText().trim(), "Mother", "Family") == false){
                        
                        String select = "SELECT * FROM Event WHERE Event.Name = ? AND Event.Year = ?";
                        pst = con.prepareStatement(select);
                        pst.setString(1, "Trung thu");
                        pst.setString(2, jTextField1.getText().trim());
                        rs = pst.executeQuery();
                        int idEv = 0;
                        while(rs.next()){
                            idEv = rs.getInt("ID");
                        }
                        
                        insert = "INSERT INTO GIFT(`Gift_Name`, `Cost`) VALUES (?, ?)";
                        pst = con.prepareStatement(insert);
                        pst.setString(1, PhanQua.getText().trim());
                        pst.setString(2, GiaTri.getText().trim());
                        pst.executeUpdate();
                        
                        insert = "INSERT INTO Family(`Father`, `Mother`, `Address`, `ID_E`)"
                            + "VALUES (?, ?, ?, ?)";
                        pst = con.prepareStatement(insert);
                        pst.setString(1, ConOng.getText().trim());
                        pst.setString(2, ConBa.getText().trim());
                        pst.setString(3, DiaChi.getText().trim());
                        pst.setString(4, Integer.toString(idEv));
                        pst.executeUpdate();
                        
                        insert = "INSERT INTO Achievement(`Achievement_Name`) VALUES (?)";
                        pst = con.prepareStatement(insert);
                        pst.setString(1, "Dịp đặc biệt");
                        pst.executeUpdate();
                        
                        insert = "INSERT INTO Recipient(`Name`, `Age`, `Sex`, `School`, `ID_Family`) "
                            + "VALUES (?, ?, ?, ?, ?)";
                        pst = con.prepareStatement(insert);
                        pst.setString(1, HoTen1.getText().trim());
                        pst.setString(2, Tuoi.getText().trim());
                        pst.setString(3, sex);
                        pst.setString(4, jTextField2.getText().trim());
                        // select id_family to insert
                        String sel = "SELECT * FROM Family "
                                + "WHERE Father like ? AND Mother like ? AND ID_E = ?";
                        PreparedStatement pst2 = con.prepareStatement(sel);
                        pst2.setString(1, ConOng.getText().trim());
                        pst2.setString(2, ConBa.getText().trim());
                        pst2.setString(3, Integer.toString(idEv));
                        ResultSet idRes = pst2.executeQuery();
                        while(idRes.next()){
                            int idFamily = idRes.getInt("ID");
                            pst.setString(5, Integer.toString(idFamily));
                        }
                        pst.executeUpdate();
                        
                        // add row to Receive_Gift table
                        // get id of recipient
                        String selectID = "SELECT * FROM Recipient, Family "
                                + "WHERE Recipient.ID_Family = Family.ID";
                        pst = con.prepareStatement(selectID);
                        rs = pst.executeQuery();
                        int idRecipient = -1;
                        while (rs.next()){
                            if (rs.getString("Name").equals(HoTen1.getText().trim()) 
                                    && (rs.getString("Father").equals(ConOng.getText().trim())) 
                                    && (rs.getString("Mother").equals(ConBa.getText().trim())) 
                                    && (rs.getString("Address").equals(DiaChi.getText().trim()))){
                                idRecipient = rs.getInt("ID");
                            }
                        }
                        int idEvent = idEv;
                        int idGift = -1;
                        int idAchievement = -1;
                        // get id of Gift
                        selectID = "SELECT * FROM Gift "
                                + "WHERE Gift.Gift_Name = ?";
                        pst = con.prepareStatement(selectID);
                        pst.setString(1, PhanQua.getText().trim());
                        rs = pst.executeQuery();
                        while(rs.next()){
                            idGift = rs.getInt("ID");
                        }
                        
                        // get id of Achievement
                        selectID = "SELECT * FROM Achievement "
                              + "WHERE Achievement.Achievement_Name = ?";
                        pst = con.prepareStatement(selectID);
                        pst.setString(1, "Dịp đặc biệt");
                        rs = pst.executeQuery();
                        while(rs.next()){
                            idAchievement = rs.getInt("ID");
                        }

                        insert = "INSERT INTO Receive_Gift"
                               + "(`ID_Recipient`, `ID_Gift`, `ID_Event`, `ID_Achievement`, `Quantity`) "
                               + "VALUES (?, ?, ?, ?, ?)";
                        pst = con.prepareStatement(insert);
                        pst.setString(1, Integer.toString(idRecipient));
                        pst.setString(2, Integer.toString(idGift));
                        pst.setString(3, Integer.toString(idEvent));
                        pst.setString(4, Integer.toString(idAchievement));
                        pst.setString(5, Integer.toString((Integer) SoLuong.getValue()));
                        pst.executeUpdate();
                        
                        JOptionPane.showMessageDialog(rootPane, "Đã Lưu !");
                    }   
                }
            }
            catch(Exception ex){
    //            JOptionPane.showMessageDialog(rootPane, ex);
                ex.printStackTrace();
            }
            //JOptionPane.showMessageDialog(rootPane, "Đã Lưu !");
        }
    }//GEN-LAST:event_ThemActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /*
        TetTrungThuList tttl = new TetTrungThuList();
        tttl.setVisible(true);
        tttl.setResizable(false);
        tttl.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        */
        DisplayDB d = new DisplayDB();
        d.setVisible(true);
       
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void HoTen1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HoTen1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HoTen1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void TruongHocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TruongHocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TruongHocActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MidAutumn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MidAutumn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MidAutumn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MidAutumn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MidAutumn().setVisible(true);
            }
        });
    }
       
    public String gioitinh;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ConBa;
    private javax.swing.JTextField ConOng;
    private javax.swing.JTextField DiaChi;
    private javax.swing.JTextField GiaTri;
    private javax.swing.JComboBox<String> GioiTinh;
    private javax.swing.JTextField HoTen1;
    private javax.swing.JTextField PhanQua;
    private javax.swing.JSpinner SoLuong;
    private javax.swing.JButton Them;
    private javax.swing.JTextField TruongHoc;
    private javax.swing.JTextField Tuoi;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
